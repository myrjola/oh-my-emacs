#+TITLE: Oh My Emacs Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: org-el-get-packages
  :END:

#+NAME: org-el-get-packages
#+CAPTION: El-get packages for ome-org module
|            | Status      | Description                               |
|------------+-------------+-------------------------------------------|
| [[http://gitorious.org/evil][evil]]       | Required    | Finally, the Emacs OS get a good editor.      |
| [[http://orgmode.org/][org-mode]]   | Required    | One of the killer Apps on Emacs platform. |
| [[http://www.emacswiki.org/emacs/Htmlize][htmlize]].el | Recommended | Export an buffer to html format.          |
| [[http://staff.science.uva.nl/~dominik/Tools/cdlatex/][CDLaTeX]]    | Recommended | Speedy \LaTeX{} input.                    |

* Org-mode upgrade
  :PROPERTIES:
  :CUSTOM_ID: org-mode-upgrade
  :END:

#+BEGIN_QUOTE
Org 8.0 is the most disruptive major version of Org.

-- http://orgmode.org/Changes_old.html
#+END_QUOTE

So why upgrade? Because it is there, it is the future of org-mode. Second, I
want to export my org files to markdown format, sometimes, and org-mode 8.x
provide a new great export engine, which is one of the most exciting features
of org-mode 8.x, check [[http://article.gmane.org/gmane.emacs.orgmode/65574][the mailing list]] for original announcing post. For other
features, check [[http://orgmode.org/worg/org-8.0.html][org 8.0 upgrading doc]].

You can get the latest org-mode by =M-x el-get-install RET org-mode=
directly. However, with oh-my-emacs, we need some tricks to make it work.

Oh-my-emacs use =org-babel= from =org-mode= to provide a literate emacs
configuration, so we need to =(require 'org)= just after oh-my-emacs
starts. However, by default, oh-my-emacs will load the builtin =org-mode=
instead of the latest =org-mode= package from =el-get=. To replace the builtin
=org-mode= with the latest =org-mode= from =el-get= when we boot oh-my-emacs
even for the initial oh-my-emacs setup, we need to install =org-mode= just
after =el-get= setup, that means, =org-mode= should be the first package to be
installed via =el-get=, this can be done by putting the following code snippet
to =$HOME/.emacs.d/init.el=:

#+NAME: org-mode-upgrade
#+BEGIN_SRC emacs-lisp :tangle no
  (defun ome-org-mode-setup ()
    ;; markdown export support
    (require 'ox-md))

  (add-to-list 'el-get-sources
               '(:name org-mode
                       :after (progn
                                (ome-org-mode-setup))))

  (el-get 'sync (mapcar 'el-get-source-name el-get-sources))
#+END_SRC

* Keybindings
  :PROPERTIES:
  :CUSTOM_ID: keybindings
  :END:

#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "M-C-n") 'outline-next-visible-heading)
              (local-set-key (kbd "M-C-p") 'outline-previous-visible-heading)
              (local-set-key (kbd "M-C-u") 'outline-up-heading)
              ;; table
              (local-set-key (kbd "M-C-w") 'org-table-copy-region)
              (local-set-key (kbd "M-C-y") 'org-table-paste-rectangle)
              (local-set-key (kbd "M-C-l") 'org-table-sort-lines)
              ;; display images
              (local-set-key (kbd "M-I") 'org-toggle-inline-images)))
#+END_SRC

* Speed keys
  :PROPERTIES:
  :CUSTOM_ID: speed-keys
  :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+NAME: speed-keys
#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

* Code blocks
  :PROPERTIES:
  :CUSTOM_ID: babel
  :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.

#+NAME: babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (gnuplot . t)
     (java . t)
     (latex . t)
     (ledger . t)
     (python . t)
     (ruby . t)
     (sh . t)
     (ditaa . t)
     (plantuml . t)
     (sql . t)
     (awk . t)
     (sqlite . t)))

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  (setq org-plantuml-jar-path "/opt/plantuml/plantuml.jar")
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Code block fontification
  :PROPERTIES:
  :CUSTOM_ID: code-block-fontification
  :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

#+NAME: code-block-fontification
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

* The Library of Babel
  :PROPERTIES:
  :CUSTOM_ID: library-of-babel
  :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

* Htmlize
  :PROPERTIES:
  :CUSTOM_ID: htmlize
  :END:

[[http://www.emacswiki.org/emacs/Htmlize][htmlize.el]] is a package for exporting the contents of an Emacs buffer to HTML
while respecting display properties such as colors, fonts, underlining,
invisibility, etc.

Org-mode can utilize =htmlize= when =org-html-export-as-html= for source code syntax
highlighting if =htmlize= is available.

However, there's a minor problem with oh-my-emacs's default settings of
=rainbow-delimiters-mode=. Functions such as =htmlize-buffer= will report an
error: =htmlize-make-face-map: Wrong type argument: listp,
"rainbow-delimiters-depth-1-face"=, so I do a small hack to overcome this by
using the elisp's =defadvice= utility.

Actually, =rainbow-delimiters-mode= still has some problems within org-mode's
code block, which may be a bug of =rainbow-delimiters-mode=.

#+NAME: htmlize
#+BEGIN_SRC emacs-lisp
  (defadvice htmlize-buffer-1 (around ome-htmlize-buffer-1 disable)
    (rainbow-delimiters-mode -1)
    ad-do-it
    (rainbow-delimiters-mode t))

  (defun ome-htmlize-setup ()
    (if (el-get-read-package-status 'rainbow-delimiters)
        (progn
          (ad-enable-advice 'htmlize-buffer-1 'around 'ome-htmlize-buffer-1)
          (ad-activate 'htmlize-buffer-1))))

  (ome-install 'htmlize)
#+END_SRC

* Org-LaTeX
  :PROPERTIES:
  :CUSTOM_ID: org-latex
  :END:

Syntax highlighting is really cool when export org-mode files to other
formats. We get syntax highlighting for html by [[http://www.emacswiki.org/emacs/Htmlize][htmlize.el]], so what about
\LaTeX{}?

Actually, org-mode has builtin support for syntax highlighting in \LaTeX{},
check the builtin documentation via =C-h v org-latex-listings RET=. Check post
[[http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html][1]] and [[http://praveen.kumar.in/2012/03/10/org-mode-latex-and-minted-syntax-highlighting/][2]] for technical details.

Note that the following code snippet works with org-mode 8.x branch. So if you
still use org-mode 7.x, you may need to [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-12-3][setup manually]].

#+NAME: org-latex
#+BEGIN_SRC emacs-lisp
  ;; code snippet comes from
  ;; http://joat-programmer.blogspot.com/2013/07/org-mode-version-8-and-pdf-export-with.html
  ;; Include the latex-exporter
  ;; check whether org-mode 8.x is available
  (when (require 'ox-latex nil 'noerror)
    ;; Add minted to the defaults packages to include when exporting.
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    ;; Tell the latex export to use the minted package for source
    ;; code coloration.
    (setq org-latex-listings 'minted)
    ;; Let the exporter use the -shell-escape option to let latex
    ;; execute external programs.
    ;; This obviously and can be dangerous to activate!
    (setq org-latex-pdf-process
          '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
#+END_SRC

* Org-CDLaTeX
  :PROPERTIES:
  :CUSTOM_ID: org-cdlatex
  :END:

If [[http://staff.science.uva.nl/~dominik/Tools/cdlatex/][CDLaTeX]] is available, turn on it in org-mode. See "[[http://www.gnu.org/software/emacs/manual/html_node/org/CDLaTeX-mode.html][Using CDLaTeX to enter
math]]" for details.

#+NAME: org-cdlatex
#+BEGIN_SRC emacs-lisp
  (when (el-get-package-is-installed 'cdlatex-mode)
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex))
#+END_SRC

* Agenda configuration

  #+begin_src emacs-lisp
        (require 'org-protocol)
        (require 'org-agenda)
        (require 'org-habit)

        ; Shortcut to gtd-file
        (defun gtd ()
           (interactive)
           (find-file "~/org/gtd.org")
        )

        ; Bulk archive done in subtree
        (defun my-org-archive-done-tasks ()
          (interactive)
          (org-map-entries 'org-archive-subtree "/DONE" 'file))

        ;; Targets include this file and any file contributing to the agenda - up to 5 levels deep
        (setq org-refile-targets (quote ((nil :maxlevel . 5)
          (org-agenda-files :maxlevel . 5))))

        (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
        (setq org-mobile-files
              (list "~/org/gtd.org" "~/org/notes.org" "~/org/captures.org" "~/org/journal.org"))

        (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

        (setq org-agenda-files org-mobile-files)

        ; I prefer return to activate a link
        (setq org-return-follows-link t)

        ;;; org agenda -- leave in emacs mode but add j & k
        (define-key org-agenda-mode-map "j" 'evil-next-line)
        (define-key org-agenda-mode-map "k" 'evil-previous-line)
        (define-key org-agenda-mode-map "s" 'org-agenda-schedule)
        (define-key org-agenda-mode-map "d" 'org-agenda-deadline)

        (setq org-default-notes-file (concat org-directory "/captures.org"))

        (define-key evil-normal-state-map (kbd ",ag") 'org-agenda)
        (define-key evil-normal-state-map (kbd ",cj") 'org-clock-goto)
        (define-key evil-normal-state-map (kbd ",mi") 'org-mobile-pull)
        (define-key evil-normal-state-map (kbd ",me") 'org-mobile-push)

    (setq org-agenda-custom-commands
          '(("r" "Relex agenda"
             ;; agenda for today
             ((agenda "" ((org-agenda-ndays 1)))
              ;; scheduled todos
              (tags-todo "CATEGORY=\"Relex\""
                         ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                                      'deadline 'scheduled)))
                         (org-agenda-overriding-header "Unscheduled Relex TODOs"))))))

        (setq org-capture-templates
              (quote
               (("w"
                 "Default template"
                 entry
                 (file+headline "~/org/captures.org" "Notes")
                 "* %c\n%u\n %i"
                 :empty-lines 1)
              ("l" "ticket todo" entry (file+olp "~/org/gtd.org" "RELEX" "Misc tasks")
                     "* TODO %c\n%U\n%i" :clock-in t :clock-resume t)
              ("r" "RELEX todo" entry (file+olp "~/org/gtd.org" "RELEX" "Misc tasks")
                     "* TODO %?\n%U" :clock-in t :clock-resume t)
              ("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
                     "* TODO %?\n%i")
              ("c" "Capture" entry (file "~/org/captures.org")
                     "* %?\nEntered on %U\n%i")
              ("h" "Habit" entry (file+headline "~/org/gtd.org" "Habits")
                     "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
              ("j" "Journal" entry (file+datetree "~/org/journal.org")
                     "* %?\nEntered on %U\n  %i"))))

        ; position the habit graph on the agenda to the right of the default
        (setq org-habit-graph-column 50)
        (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))


        ;; Compact the block agenda view
        (setq org-agenda-compact-blocks t)

        (setq org-todo-keywords
              (quote ((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "MAYBE(m)" "|" "DONE(d)"))))

        ;; Keep tasks with timestamps on the global todo lists
        (setq org-agenda-todo-ignore-timestamp nil)

        ;; Remove completed deadline tasks from the agenda view
        (setq org-agenda-skip-deadline-if-done t)

        ;; Remove completed scheduled tasks from the agenda view
        (setq org-agenda-skip-scheduled-if-done t)

        ;; Automatic mobileorg syncing
        (defvar org-mobile-sync-timer nil)
        (defvar org-mobile-sync-idle-secs (* 60 10))
        (defun org-mobile-sync ()
          (interactive)
          (org-mobile-pull)
          (org-mobile-push))

        (defun org-mobile-sync-enable ()
          "enable mobile org idle sync"
          (interactive)
          (setq org-mobile-sync-timer
                (run-with-idle-timer org-mobile-sync-idle-secs t
                                     'org-mobile-sync)));

        (defun org-mobile-sync-disable ()
          "disable mobile org idle sync"
          (interactive)
          (cancel-timer org-mobile-sync-timer))
        (org-mobile-sync-enable)

        (run-at-time "00:59" 3600 'org-save-all-org-buffers)

  #+end_src

* Evil keybindings

#+begin_src emacs-lisp

  (define-minor-mode evil-org-mode
    "Buffer local minor mode for evil-org"
    :init-value nil
    :lighter " EvilOrg"
    :keymap (make-sparse-keymap) ; defines evil-org-mode-map
    :group 'evil-org)

  (add-hook 'org-mode-hook 'evil-org-mode) ;; only load with org-mode

  (define-key evil-normal-state-map (kbd ",sl") 'org-store-link)
  (define-key evil-normal-state-map (kbd ",ca") 'org-capture)
  (define-key evil-normal-state-map (kbd ",gt") 'gtd)
  (define-key evil-normal-state-map (kbd ",at") 'org-attach)
  (define-key evil-normal-state-map (kbd ",ba") 'previous-buffer)


  ;; regular normal state shortcuts.
  (evil-define-key 'normal evil-org-mode-map
    "gh" 'outline-up-heading
    "gj" 'org-forward-heading-same-level
    "gk" 'org-backward-heading-same-level
    "gl" 'outline-next-visible-heading
    "H" 'org-beginning-of-line
    "L" 'org-end-of-line
    "t" 'org-todo
    "$" 'org-end-of-line
    "^" 'org-beginning-of-line
    "-" 'org-ctrl-c-minus
    ",r" 'org-refile
    ",." 'org-ctrl-c-ctrl-c
    ",*" 'org-toggle-heading
    (kbd ",ar") 'org-archive-subtree
    (kbd ",na") 'org-narrow-to-element
    (kbd ",nw") 'widen
    (kbd ",s") 'org-schedule
    (kbd ",d") 'org-deadline
    (kbd ",/") 'org-sparse-tree
    (kbd "RET") 'org-return
    (kbd ",cs") 'org-screenshot
    (kbd ",ci") 'org-clock-in
    (kbd ",co") 'org-clock-out
    (kbd ",cc") 'org-edit-special
    )

  ;; normal & insert state shortcuts.
  (mapcar (lambda (state)
            (evil-define-key state evil-org-mode-map
          (kbd "TAB") 'org-cycle
              (kbd "M-l") 'org-metaright
              (kbd "M-h") 'org-metaleft
              (kbd "M-k") 'org-metaup
              (kbd "M-j") 'org-metadown
              (kbd "M-L") 'org-shiftmetaright
              (kbd "M-H") 'org-shiftmetaleft
              (kbd "M-K") 'org-shiftmetaup
              (kbd "C-<return>") 'org-insert-heading
              (kbd "C-S-<return>") 'org-insert-todo-heading
              (kbd "M-J") 'org-shiftmetadown)) '(normal insert))


  (define-minor-mode evil-org-capture-mode
    "Buffer local minor mode for evil-org-capture"
    :init-value nil
    :lighter " EvilOrgCapture"
    :keymap (make-sparse-keymap) ; defines evil-org-mode-map
    :group 'evil-org)

  (add-hook 'org-capture-mode-hook 'evil-org-capture-mode) ;; only load with org-capture-mode

  ;; regular normal state shortcuts.
  (evil-define-key 'normal evil-org-capture-mode-map
    (kbd ",cf") 'org-capture-finalize
    (kbd ",ck") 'org-capture-kill
    (kbd ",cr") 'org-capture-refile)

  (setq org-edit-src-auto-save-idle-delay 1)

  (define-minor-mode evil-org-src-mode
    "Buffer local minor mode for evil-org-src"
    :init-value nil
    :lighter " EvilOrgSrc"
    :keymap (make-sparse-keymap) ; defines evil-org-mode-map
    :group 'evil-org)

  (add-hook 'org-src-mode-hook 'evil-org-src-mode) ;; only load with org-capture-mode

  ;; regular normal state shortcuts.
  (evil-define-key 'normal evil-org-src-mode-map
    (kbd ",cf") 'org-edit-src-exit
    (kbd ",ck") 'org-edit-src-abort)
#+end_src

* Misc defuns

#+begin_src emacs-lisp

  (defun org-screenshot ()
      "Take a screenshot into a time stamped unique-named file in the same directory as the org-buffer and insert a link to this file. Also copy filename to clipboard"
      (interactive)
      (setq filename (concat (make-temp-name (concat "/home/martin/org/screenshots/" (format-time-string "%Y%m%d_%H%M%S_")) ) ".jpg"))
      (call-process "import" nil nil nil filename)
      (insert (concat "[[" filename "]]"))
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (org-redisplay-inline-images))

#+end_src

* org-trello

Trello is great for those that haven't discovered the joys of org-mode

#+begin_src emacs-lisp
  (defun ome-org-trello-setup ()
    (require 'org-trello))

  (ome-install 'org-trello)
#+end_src


* XeLaTeX and pdfLaTeX Export Settings
   Configure org-mode to export directly to PDF using  xelatex, compiling the bibliography as it goes, with my preferred setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your preferences and local configuration.

#+source: orgmode-xelatex-export
#+begin_src emacs-lisp

      ;; Choose either listings or minted for exporting source code blocks.
      ;; Using minted (as here) requires pygments be installed. To use the
      ;; default listings package instead, use
      ;; (setq org-latex-listings t)
      ;; and change references to "minted" below to "listings"
      (setq org-latex-listings 'minted)

      ;; default settings for minted code blocks.
      ;; bg will need to be defined in the preamble of your document. It's defined in  org-preamble-xelatex.sty below.
      (setq org-latex-minted-options
            '(;("frame" "single")
              ("bgcolor" "bg")
              ("fontsize" "\\small")
              ))

    ;; turn off the default toc behavior; deal with it properly in headers to files.
    (defun org-latex-no-toc (depth)
      (when depth
          (format "%% Org-mode is exporting headings to %s levels.\n"
                  depth)))
    (setq org-latex-format-toc-function 'org-latex-no-toc)

    ;; note the insertion of the \input statement for the vc information
    (add-to-list 'org-latex-classes
                   '("memarticle"
                     "\\documentclass[11pt,oneside,article]{memoir}\n\\input{vc} % vc package"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                   '("membook"
                     "\\documentclass[11pt,oneside]{memoir}\n\\input{vc} % vc package"
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    ;; LaTeX compilation command. For orgmode docs we just always use xelatex for convenience.
    ;; You can change it to pdflatex if you like, just remember to make the adjustments to the packages-alist below.
    (setq org-latex-pdf-process '("latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))

    ;; Default packages included in the tex file. As before, org-preamble-xelatex is part of latex-custom-kjh.
    ;; There's org-preamble-pdflatex as well, if you wish to use that instead.
    (setq org-latex-default-packages-alist nil)
    ;; (setq org-latex-packages-alist nil)
    (setq org-latex-with-hyperref nil)
  (setq org-latex-packages-alist '(("" "fontspec")
                                   ("" "hyperref")
                                   ("" "longtable")))
            ;; '(("minted" "org-preamble-xelatex" t)
    ;;           ("" "graphicx" t)
    ;;           ("" "longtable" nil)
    ;;           ("" "float" )))
#+end_src

* Todo
- How to handle =org-mode= format like ===?
